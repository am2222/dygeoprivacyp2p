<!doctype html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <title>Twitter Card</title>
    <!-- <link rel="stylesheet" href="css/estilos.css"> -->
    <link href='https://fonts.googleapis.com/css?family=Quicksand:300,400,700' rel='stylesheet' type='text/css'>
    <link href='https://fonts.googleapis.com/css?family=Lato:400,300' rel='stylesheet' type='text/css'>
    <link href="https://netdna.bootstrapcdn.com/font-awesome/3.1.1/css/font-awesome.css" rel="stylesheet">

    <script src="https://cdn.jsdelivr.net/npm/ipfs/dist/index.min.js"></script>
    <script type="text/javascript" src="orbitdb.js" charset="utf-8"></script>


    <style>
      

        * {
            -webkit-box-sizing: border-box;
            -moz-box-sizing: border-box;
            box-sizing: border-box;
        }

        body {
            background-color: #ecf0f1;
        }

        header {
            display: block;
            overflow: hidden;
            position: relative;
            padding-bottom: 2em;
            -moz-border-radius-topleft: 8px;
            -webkit-border-top-left-radius: 8px;
            border-top-left-radius: 8px;
            -moz-border-radius-topright: 8px;
            -webkit-border-top-right-radius: 8px;
            border-top-right-radius: 8px;
        }

        .container {
            width: 520px;
            margin: 3em auto 1em auto;
            -webkit-border-radius: 8px;
            -moz-border-radius: 8px;
            -ms-border-radius: 8px;
            -o-border-radius: 8px;
            border-radius: 8px;
            padding-bottom: 1.5em;
            background-color: #dde1e2;
            -webkit-box-shadow: #bdc3c7 0 5px 5px;
            -moz-box-shadow: #bdc3c7 0 5px 5px;
            box-shadow: #bdc3c7 0 5px 5px;
        }

        .bg {
            border-bottom: 8px solid #5cc0ff;
        }

        .bio:hover>.desc {
            cursor: pointer;
            opacity: 1;
        }

        .avatarcontainer {
            position: absolute;
            bottom: 0;
            right: 0;
            left: 0;
            margin: auto;
            width: 70px;
            height: 70px;
            display: block;
        }

        .avatarcontainer:hover>.hover {
            opacity: 1;
        }

        .avatar {
            width: 100%;
            border: 8px solid #5cc0ff;
            -webkit-border-radius: 50%;
            -moz-border-radius: 50%;
            -ms-border-radius: 50%;
            -o-border-radius: 50%;
            border-radius: 50%;
            overflow: hidden;
            position: relative;
        }

        .avatar img {
            width: 65px;
            height: 65px;
        }

        .avatar:hover+.hover {
            opacity: 1;
            cursor: pointer;
        }

        .hover {
            position: absolute;
            cursor: pointer;
            width: 100%;
            height: 100%;
            background-color: #3498db;
            top: 0;
            font-size: 1.8em;
            text-align: center;
            color: white;
            padding-top: 18%;
            opacity: 0;
            font-family: 'FontAwesome';
            font-weight: 300;
            border: 8px solid #5cc0ff;
            -webkit-border-radius: 50%;
            -moz-border-radius: 50%;
            -ms-border-radius: 50%;
            -o-border-radius: 50%;
            border-radius: 50%;
            -webkit-transition-property: all;
            -moz-transition-property: all;
            -o-transition-property: all;
            transition-property: all;
            -webkit-transition-duration: 0.5s;
            -moz-transition-duration: 0.5s;
            -o-transition-duration: 0.5s;
            transition-duration: 0.5s;
            -webkit-transition-timing-function: ease;
            -moz-transition-timing-function: ease;
            -o-transition-timing-function: ease;
            transition-timing-function: ease;
        }

        .data {
            margin-top: .6em;
            color: #81878b;
        }

        .data li {
            width: 32%;
            text-align: center;
            display: inline-block;
            font-size: 1.5em;
            font-family: 'Lato';
            border-right: solid 1px #bdc3c7;
        }

        .data li:last-child {
            border: none;
        }

        .data li span {
            display: block;
            text-transform: uppercase;
            font-family: 'Quicksand';
            font-size: .5em;
            margin-top: .6em;
            font-weight: 700;
        }

        .desc {
            position: absolute;
            top: 0;
            background-color: rgba(0, 0, 0, 0.6);
            width: 100%;
            height: 171px;
            padding: 1.2em 1em 0 1em;
            color: white;
            text-align: center;
            opacity: 0;
            -webkit-transition-property: all;
            -moz-transition-property: all;
            -o-transition-property: all;
            transition-property: all;
            -webkit-transition-duration: 0.3s;
            -moz-transition-duration: 0.3s;
            -o-transition-duration: 0.3s;
            transition-duration: 0.3s;
            -webkit-transition-timing-function: ease-in;
            -moz-transition-timing-function: ease-in;
            -o-transition-timing-function: ease-in;
            transition-timing-function: ease-in;
        }

        .desc h3 {
            font-family: "Lato";
            font-size: 1.2em;
            margin-bottom: .5em;
        }

        .desc p {
            font-size: .9em;
            font-family: 'Quicksand';
            line-height: 1.5em;
        }

        .follow {
            margin: 1.5em auto 0 auto;
            background-color: #2589cc;
            width: 450px;
            color: white;
            font-family: "Lato";
            text-align: center;
            padding: .5em;
            -webkit-border-radius: 5px;
            -moz-border-radius: 5px;
            -ms-border-radius: 5px;
            -o-border-radius: 5px;
            border-radius: 5px;
            -webkit-transition-property: all;
            -moz-transition-property: all;
            -o-transition-property: all;
            transition-property: all;
            -webkit-transition-duration: 0.3s;
            -moz-transition-duration: 0.3s;
            -o-transition-duration: 0.3s;
            transition-duration: 0.3s;
            -webkit-transition-timing-function: ease;
            -moz-transition-timing-function: ease;
            -o-transition-timing-function: ease;
            transition-timing-function: ease;
        }

        .follow:hover {
            background-color: #167abd;
            cursor: pointer;
        }
    </style>

</head>

<body>
    <div id="status">Init</div>
    <div>
        <header id="output-header"></header>
        <div id="output"></div>
    </div>


    <div id="users">

    </div>




</body>
<script>
    //Follow Button Effect

    // $(document).ready(

    //     function iniciar() {
    //         $('.follow').on("click", function () {
    //             $('.follow').css('background-color', '#34CF7A');
    //             $('.follow').html('<div class="icon-ok"></div> Following');
    //         });
    //     }

    // );


    const IPFSConfig = {
        repo: '/orbitdb/examples/browser/new/ipfs/0.33.1',
        relay: {
            enabled: true
        },
        hop: {
            enabled: true,
            active: true
        },
        start: true,
        preload: {
            enabled: false
        },
        EXPERIMENTAL: {
            pubsub: true,
        },
        config: {
            Addresses: {
                Swarm: [
                    // Use IPFS dev signal server
                    // '/dns4/ws-star.discovery.libp2p.io/tcp/443/wss/p2p-websocket-star',
                    // '/dns4/ws-star.discovery.libp2p.io/tcp/443/wss/p2p-websocket-star', ,
                    '/dns4/webrtc-star.discovery.libp2p.io/tcp/443/wss/p2p-webrtc-star'
                    // '/dns4/wrtc-star1.par.dwebops.pub/tcp/443/wss/p2p-webrtc-star',
                    // '/dns4/wrtc-star2.sjc.dwebops.pub/tcp/443/wss/p2p-webrtc-star'
                    //'/ip4/127.0.0.1/tcp/13579/wss/p2p-webrtc-star'
                ]
            },
        }
    }

    // const query = (db) => {
    //     return db.index()
    // }


    const queryAndRender = async (db) => {
        const networkPeers = await window.node.swarm.peers()
        const databasePeers = await window.node.pubsub.peers(db.address.toString())

        const result = db.index


        dbType = db.type;
        dbAddress = db.address;

        outputHeaderElm.innerHTML = `
    <h2>${dbType.toUpperCase()}</h2>
    <h3 id="remoteAddress">${dbAddress}</h3>
    <p>Copy this address and use the 'Open Remote Database' in another browser to replicate this database between peers.</p>
  `


        outputElm.innerHTML = `
  <div><b>Peer ID:</b> ${orbitdb.id}</div>
  <div><b>Peers (database/network):</b> ${databasePeers.length} / ${networkPeers.length}</div>
  <div><b>Oplog Size:</b> ${Math.max(db._replicationStatus.progress, db._oplog.length)} / ${db._replicationStatus.max}</div>
  <h2>Results</h2>
  <div id="results">
    <div>
    ${result && Array.isArray(result) && result.length > 0 && db.type !== 'docstore' && db.type !== 'keyvalue'
      ? result.slice().reverse().map((e) => e.payload.value).join('<br>\n')
      : db.type === 'docstore'
        ? JSON.stringify(result, null, 2)
        : result ? result.toString().replace('"', '').replace('"', '') : result
    }
    </div>
  </div>
`
        var element = document.getElementById('users');
        var keys = Object.keys(result)
        for (var i = 1; i < keys.length; i++) {
            var value = result[keys[i]]
            value = JSON.parse(value)

            if (value['dbaddress'] != "address") {
                var card = ` <div class="container">    <header>
            <div class="bio">
                <img src="${value['profile_banner_url']}" alt="background" style="border-bottom-color:#${value['profile_background_color']} !important" class="bg">
                <div class="desc">
                    <h3>${value['name']}</h3>
                    <p>${value['description']}</p>
                </div>
            </div>

            <div class="avatarcontainer">
                <img src="${value['profile_image_url']}"  style="border-color:#${value['profile_background_color']} !important" alt="avatar" class="avatar">
                <div class="hover">
                    <div class="icon-twitter"></div>
                </div>
            </div>


        </header>

        <div class="content">
            <div class="data">
                <ul>
                    <li>
                        ${value['statuses_count']}
                        <span>Tweets</span>
                    </li>
                    <li>
                        ${value['followers_count']}
                        <span>Followers</span>
                    </li>
                    <li>
                        ${value['friends_count']}
                        <span>Following</span>
                    </li>
                </ul>
            </div>

           <a href="/profile${value['dbaddress']}" > <div class="follow" style="background-color:#${value['profile_background_color']} !important" >
              
                <div class="icon-twitter"></div> Profile
            </div></a>
        </div></div>  </br>`
                element.innerHTML += card
            }

        }



    }

    const outputHeaderElm = document.getElementById("output-header")
    const outputElm = document.getElementById("output")
    const statusElm = document.getElementById("status")

    document.addEventListener('DOMContentLoaded', async () => {

        

        const node = await Ipfs.create(IPFSConfig)
        window.node = node
        statusElm.innerHTML = "IPFS Started"
        orbitdb = await OrbitDB.createInstance(node)

        const status = node.isOnline() ? 'online' : 'offline'
        console.log(`IPFS Node Id - ${orbitdb.id}`);
        console.log(`OrbitDB Id - ${orbitdb.identity.id}`);
        console.log(`Node status: ${status}`)
        statusElm.innerHTML = `Node status: ${status}`

        // const address = await addDatabase("hithere")
        var userDbAddress = "/orbitdb/zdpuAsmVucRqAwPuwaB5b1vDuLRZ4P2RF6yEX2Ff3P274GMdw/_users"
        statusElm.innerHTML = "Connecting to peers..."
        var db = await orbitdb.open(userDbAddress, {
            sync: true
        })
        db.events.on('ready', () => queryAndRender(db))
        // When database gets replicated with a peer, display results
        db.events.on('replicated', () => queryAndRender(db))
        // When we update the database, display result
        db.events.on('write', () => queryAndRender(db))

        db.events.on('replicate.progress', () => queryAndRender(db))

        // Hook up to the load progress event and render the progress
        let maxTotal = 0,
            loaded = 0
        db.events.on('load.progress', (address, hash, entry, progress, total) => {
            loaded++
            maxTotal = Math.max.apply(null, [maxTotal, progress, 0])
            total = Math.max.apply(null, [progress, maxTotal, total, entry.clock.time, 0])
            statusElm.innerHTML = `Loading database... ${maxTotal} / ${total}`
        })

        db.events.on('ready', () => {
            // Set the status text
            setTimeout(() => {
                statusElm.innerHTML = 'Database is ready'
            }, 1000)
        })

        // Load locally persisted database
        await db.load()



        // You can write more code here to use it. Use methods like
        // node.add, node.get. See the API docs here:
        // https://github.com/ipfs/js-ipfs/tree/master/packages/interface-ipfs-core
    })
</script>

</html>